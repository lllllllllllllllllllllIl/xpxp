-- LocalScript (client)
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local player = Players.LocalPlayer
local PlayerGui = player:WaitForChild("PlayerGui")
local backpack = player:WaitForChild("Backpack")
local actionValues = backpack:WaitForChild("ActionValues")
local power = actionValues:WaitForChild("Power")

local powerThreshold = 54
local shotMultiplier = 600
local firingEnabled = false
local fired = false

-- State for hitbox touch exhaustion
local touchExhausted = false

-- GUI Setup
local screenGui = Instance.new("ScreenGui", PlayerGui)
screenGui.Name = "ShotToggleGUI"
screenGui.ResetOnSpawn = false

local frame = Instance.new("Frame", screenGui)
frame.Size = UDim2.new(0, 200, 0, 50)
frame.Position = UDim2.new(0, 20, 0, 100)
frame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
frame.BorderSizePixel = 0
frame.Active = true
frame.Draggable = true

local toggleButton = Instance.new("TextButton", frame)
toggleButton.Size = UDim2.new(1, 0, 1, 0)
toggleButton.Text = "Auto Shot: OFF"
toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
toggleButton.BackgroundColor3 = Color3.fromRGB(0, 150, 255)
toggleButton.Font = Enum.Font.SourceSansBold
toggleButton.TextSize = 18

-- Toggle Button Logic
toggleButton.MouseButton1Click:Connect(function()
    if not fired then
        firingEnabled = not firingEnabled
        toggleButton.Text = firingEnabled and "Auto Shot: ON" or "Auto Shot: OFF"
        toggleButton.BackgroundColor3 = firingEnabled and Color3.fromRGB(0, 200, 0) or Color3.fromRGB(0, 150, 255)
    end
end)

-- Helpers for touch interest
local spamEnd = 0
local spamRunning = false

local function getHitbox()
    local oobs = workspace:FindFirstChild("OOBS")
    if not oobs then return nil end
    return oobs:FindFirstChild("OOB4")
end

local function getTouchPart()
    local char = player.Character or player.CharacterAdded:Wait()
    return char:WaitForChild("HumanoidRootPart") or char:FindFirstChildWhichIsA("BasePart")
end

local function disableAll()
    firingEnabled = false
    toggleButton.Active = false
    toggleButton.AutoButtonColor = false
    toggleButton.Text = "Disabled"
    toggleButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
end

local function ensureSpamLoop()
    if spamRunning then return end
    if touchExhausted then return end
    if typeof(firetouchinterest) ~= "function" then
        warn("firetouchinterest not available; cannot spam touch interest.")
        return
    end

    local hitbox = getHitbox()
    if not hitbox then
        warn("OOB4 hitbox not found under OOBS.")
        return
    end

    local toucher = getTouchPart()
    if not toucher then
        warn("No valid toucher part on character.")
        return
    end

    spamRunning = true
    task.spawn(function()
        local startTime = os.clock()
        while os.clock() < spamEnd do
            -- If exhausted externally in between, break
            if touchExhausted then
                break
            end
            firetouchinterest(toucher, hitbox, 0)
            firetouchinterest(toucher, hitbox, 1)
            task.wait(0) -- minimal yield
        end
        spamRunning = false

        -- Mark exhausted after completing the 10s window once
        if os.clock() >= startTime + 10 then
            touchExhausted = true
            -- Disable UI to indicate it's dead / no longer working
            disableAll()
            print("Touch spam exhausted after 10s; further touching disabled.")
        end
    end)
end

-- Fire Shot Function (and also triggers touch interest spam on shot)
local function fireShot()
    local args = {
        [1] = false,
        [2] = "Shooting",
        [3] = "Standing Shot"
    }

    local playerEvents = backpack:FindFirstChild("PlayerEvents") or ReplicatedStorage:FindFirstChild("PlayerEvents")
    if playerEvents then
        local shootingEvent = playerEvents:FindFirstChild("Shooting")
        if shootingEvent then
            for i = 1, shotMultiplier do
                shootingEvent:FireServer(unpack(args))
            end
            print("Fired", shotMultiplier, "shots at power â‰¥", powerThreshold)
            -- Also start touch interest spam for 10 seconds on shot (only once, then exhausts)
            if not touchExhausted then
                spamEnd = os.clock() + 10
                ensureSpamLoop()
            end
        end
    end
end

-- Power Listener for threshold-based one-time auto shot
local thresholdConnection
thresholdConnection = power:GetPropertyChangedSignal("Value"):Connect(function()
    if not fired and firingEnabled and power.Value >= powerThreshold then
        fired = true
        fireShot()

        -- Cleanup original GUI and listener
        if thresholdConnection then thresholdConnection:Disconnect() end
        screenGui:Destroy()
        print("Shot fired. GUI and listener destroyed.")
    end
end)

-- Separate listener: any change to power extends/starts 10s touch spam (unless exhausted)
local lastPower = power.Value
power:GetPropertyChangedSignal("Value"):Connect(function()
    local newPower = power.Value
    if newPower ~= lastPower and not touchExhausted then
        spamEnd = os.clock() + 10
        ensureSpamLoop()
        lastPower = newPower
    end
end)

-- Ensure character loaded so toucher resolves
if not player.Character then
    player.CharacterAdded:Wait()
end
